{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Application Server [1.4.5]",
    "Parameters": {
        "InternalSG": {
            "Description": "Security Group ID",
            "Type": "String",
            "Default": "sg-00000000",
            "AllowedPattern": "sg-[0-9a-f]{8}",
            "ConstraintDescription": "a valid aws security group id"
        },
        "ExternalSG": {
            "Description": "Security Group ID",
            "Type": "String",
            "Default": "sg-00000000",
            "AllowedPattern": "sg-[0-9a-f]{8}",
            "ConstraintDescription": "a valid aws security group id"
        },
        "AppSG": {
            "Description": "Security Group ID",
            "Type": "String",
            "Default": "sg-00000000",
            "AllowedPattern": "sg-[0-9a-f]{8}",
            "ConstraintDescription": "a valid aws security group id"
        },
        "Subnet": {
            "Description": "Subnet Id",
            "Type": "String",
            "Default": "subnet-00000000",
            "AllowedPattern": "subnet-[0-9a-f]{8}",
            "ConstraintDescription": "a valid aws subnet id"
        },
        "PrivateRTB": {
            "Description": "private route table for this nat",
            "Type": "String",
            "Default": "rtb-00000000",
            "AllowedPattern": "rtb-[0-9a-f]{8}",
            "ConstraintDescription": "a valid aws route table id"
        },
        "AppInstanceProfile": {
            "Type": "String",
            "Description": "string"
        },
        "ChefRoles": {
            "Type": "String",
            "Description": "string"
        },
        "ChefEnv": {
            "Type": "String",
            "Description": "string"
        },
        "ChefServerURL": {
            "Type": "String",
            "Description": "string"
        },
        "ChefOrg": {
            "Type": "String",
            "Description": "string"
        },
        "ChefProxyURL": {
            "Type": "String",
            "Description": "string"
        },
        "InstanceAMI": {
            "Description": "Machine Image",
            "Type": "String",
            "Default": "ami-00000000",
            "AllowedPattern": "ami-[0-9a-f]{8}",
            "ConstraintDescription": "a valid aws image id"
        },
        "NatInstanceType": {
            "Description": "EC2 Instance Type",
            "Type": "String",
            "Default": "m1.medium",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge",
                "cr1.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge"
            ],
            "ConstraintDescription": "a valid EC2 instance type."
        },
        "RootDiskSize": {
            "Description": "Disk Size (gb)",
            "Default": "12",
            "Type": "Number",
            "MinValue": "0",
            "MaxValue": "2000"
        },
        "RootDiskDevice": {
            "Type": "String",
            "Default": "/dev/sda1",
            "Description": "string"
        },
        "OptDiskSize": {
            "Description": "Disk Size (gb)",
            "Default": "0",
            "Type": "Number",
            "MinValue": "0",
            "MaxValue": "2000"
        },
        "MaxProvisionTime": {
            "Default": "1500",
            "Description": "Provision wait time (s)",
            "Type": "Number",
            "MinValue": "0",
            "MaxValue": "3600"
        },
        "NodeName": {
            "Type": "String",
            "Default": "nat",
            "Description": "string"
        },
        "NodeIndex": {
            "Type": "String",
            "Default": "01",
            "Description": "string"
        },
        "AssignEIP": {
            "Description": "",
            "Type": "String",
            "Default": "False",
            "AllowedValues": [
                "False",
                "True"
            ]
        },
        "OpsAlertsTopic": {
            "Type": "String",
            "Description": "string"
        },
        "KeyPair": {
            "Description": "",
            "Type": "String",
            "Default": "no-key",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "a valid key"
        },
        "PublicBucketName": {
            "Description": "S3 Bucket Name",
            "Type": "String",
            "AllowedPattern": "[-A-Za-z0-9.]{2,64}",
            "ConstraintDescription": "a S3 bucket name"
        },
        "PrivateBucketName": {
            "Description": "S3 Bucket Name",
            "Type": "String",
            "AllowedPattern": "[-A-Za-z0-9.]{2,64}",
            "ConstraintDescription": "a S3 bucket name"
        },
        "BootPriority": {
            "Description": "Boot Priority Level",
            "Type": "Number",
            "Default": "0",
            "MinValue": "0"
        },
        "Purpose": {
            "Description": "Instance Purpose",
            "Type": "String",
            "Default": "infrastructure",
            "AllowedPattern": "[A-Za-z0-9_-]+"
        },
        "Domain": {
            "Description": "app domain",
            "Type": "String",
            "Default": "no.domain.com",
            "AllowedPattern": "[-A-Za-z0-9.]+\\.[A-Za-z]{2,4}",
            "ConstraintDescription": "a domain"
        },
        "Environment": {
            "Type": "String",
            "Default": "NOENVIRONMENT",
            "Description": "environment"
        },
        "Project": {
            "Type": "String",
            "Default": "NOPROJECT",
            "Description": "project"
        }
    },
    "Conditions": {
        "NeedsOptVolume": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "OptDiskSize"
                        },
                        "0"
                    ]
                }
            ]
        },
        "NeedsEIP": {
            "Fn::Equals": [
                {
                    "Ref": "AssignEIP"
                },
                "True"
            ]
        },
        "MustWait": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "MaxProvisionTime"
                        },
                        "0"
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "BandwidthAlarmsPerInstanceType": {
            "t2.small": {
                "high": "1500000000",
                "low": "360000000"
            },
            "m3.medium": {
                "high": "3000000000",
                "low": "720000000"
            },
            "m3.large": {
                "high": "3000000000",
                "low": "720000000"
            },
            "m3.xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "m3.2xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "c4.large": {
                "high": "3000000000",
                "low": "720000000"
            },
            "c4.xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "c4.2xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "c4.4xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "c4.8xlarge": {
                "high": "54000000000",
                "low": "1320000000"
            },
            "c3.large": {
                "high": "3000000000",
                "low": "720000000"
            },
            "c3.xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "c3.2xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "c3.4xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "c3.8xlarge": {
                "high": "54000000000",
                "low": "1320000000"
            },
            "m1.small": {
                "high": "1500000000",
                "low": "360000000"
            },
            "m1.medium": {
                "high": "3000000000",
                "low": "720000000"
            },
            "m1.large": {
                "high": "3000000000",
                "low": "720000000"
            },
            "m1.xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            },
            "m1.2xlarge": {
                "high": "5400000000",
                "low": "1320000000"
            }
        }
    },
    "Resources": {
        "NATDevice": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "NatInstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "AppInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "SourceDestCheck": "False",
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0",
                        "AssociatePublicIpAddress": "true",
                        "GroupSet": [
                            {
                                "Ref": "InternalSG"
                            },
                            {
                                "Ref": "AppSG"
                            },
                            {
                                "Ref": "ExternalSG"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet"
                        },
                        "DeleteOnTermination": "true"
                    }
                ],
                "ImageId": {
                    "Ref": "InstanceAMI"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": {
                            "Ref": "RootDiskDevice"
                        },
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "RootDiskSize"
                            },
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash",
                                "\n",
                                "",
                                "\n",
                                "exec > >(tee /var/log/userdata.log | logger -t userdata -s 2>/dev/console) 2>&1",
                                "\n",
                                "",
                                "\n",
                                "export HOME=/root",
                                "\n",
                                "export PATH=$PATH:/usr/local/sbin",
                                "\n",
                                "",
                                "\n",
                                "logger -s -t userdata 'create the environment descriptor file'",
                                "\n",
                                "",
                                "\n",
                                "SNCR_AWS_ENV='/usr/local/etc/sncr-aws-env.sh'",
                                "\n",
                                "",
                                "\n",
                                "cat <<EOF > $SNCR_AWS_ENV",
                                "\n",
                                "DOMAIN='",
                                {
                                    "Ref": "Domain"
                                },
                                "'",
                                "\n",
                                "NODENAME='",
                                {
                                    "Ref": "NodeName"
                                },
                                "'",
                                "\n",
                                "NODEINDEX='",
                                {
                                    "Ref": "NodeIndex"
                                },
                                "'",
                                "\n",
                                "PRIVATEBUCKET='",
                                {
                                    "Ref": "PrivateBucketName"
                                },
                                "'",
                                "\n",
                                "PUBLICBUCKET='",
                                {
                                    "Ref": "PublicBucketName"
                                },
                                "'",
                                "\n",
                                "PROJECT_NAME='",
                                {
                                    "Ref": "Project"
                                },
                                "'",
                                "\n",
                                "PROJECT_ENV='",
                                {
                                    "Ref": "Environment"
                                },
                                "'",
                                "\n",
                                "AWS_REGION='",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "'",
                                "\n",
                                "OPS_ALERTS_TOPIC='",
                                {
                                    "Ref": "OpsAlertsTopic"
                                },
                                "'",
                                "\n",
                                "CHEF_ENV='",
                                {
                                    "Ref": "ChefEnv"
                                },
                                "'",
                                "\n",
                                "CHEF_ROLES='",
                                {
                                    "Ref": "ChefRoles"
                                },
                                "'",
                                "\n",
                                "CHEF_ORG='",
                                {
                                    "Ref": "ChefOrg"
                                },
                                "'",
                                "\n",
                                "CHEF_SERVER='",
                                {
                                    "Ref": "ChefServerURL"
                                },
                                "'",
                                "\n",
                                "CHEF_PROXY='",
                                {
                                    "Ref": "ChefProxyURL"
                                },
                                "'",
                                "\n",
                                "CF_WAIT_HANDLE='",
                                {
                                    "Ref": "WaitHandle"
                                },
                                "'",
                                "\n",
                                "",
                                "\n",
                                "export DOMAIN NODENAME NODEINDEX",
                                "\n",
                                "export PRIVATEBUCKET PUBLICBUCKET",
                                "\n",
                                "export PROJECT_NAME PROJECT_ENV",
                                "\n",
                                "export AWS_REGION",
                                "\n",
                                "export OPS_ALERTS_TOPIC",
                                "\n",
                                "export CHEF_ENV CHEF_ROLES CHEF_ORG CHEF_SERVER CHEF_PROXY",
                                "\n",
                                "export CF_WAIT_HANDLE",
                                "\n",
                                "EOF",
                                "\n",
                                "",
                                "\n",
                                "chmod 0644 $SNCR_AWS_ENV",
                                "\n",
                                "chown root:root $SNCR_AWS_ENV",
                                "\n",
                                ". $SNCR_AWS_ENV",
                                "\n",
                                "",
                                "\n",
                                "yum update --security -y",
                                "\n",
                                "",
                                "\n",
                                "cd /usr/local/sbin",
                                "\n",
                                "",
                                "\n",
                                "logger -s -t userdata 'fetch the helper scripts'",
                                "\n",
                                "helpers='configure-network.sh configure-nat.sh mount-disks.sh install-awscli.sh install-chef-client.sh signal-wait-handle.sh sncr-aws-versions.sh'",
                                "\n",
                                "",
                                "\n",
                                "for helper in $helpers; do",
                                "\n",
                                "  logger -s -t userdata \"Fetching $helper\"",
                                "\n",
                                "  wget http://${PUBLICBUCKET}.s3.amazonaws.com/public/$helper",
                                "\n",
                                "  chmod 0544 $helper",
                                "\n",
                                "  chown root:root $helper",
                                "\n",
                                "done",
                                "\n",
                                "",
                                "\n",
                                "logger -s -t userdata 'move the versions file to /usr/local/etc'",
                                "\n",
                                "mv -f sncr-aws-versions.sh /usr/local/etc",
                                "\n",
                                "",
                                "\n",
                                "install-awscli.sh",
                                "\n",
                                "mount-disks.sh",
                                "\n",
                                "configure-network.sh",
                                "\n",
                                "configure-nat.sh",
                                "\n",
                                "install-chef-client.sh",
                                "\n",
                                "",
                                "\n",
                                "rc=$?",
                                "\n",
                                "signal-wait-handle.sh $rc \"install-chef-client ${NODENAME}${NODEINDEX}\"",
                                "\n",
                                "",
                                "\n",
                                "echo \"Initiating a reboot\"",
                                "\n",
                                "sync",
                                "\n",
                                "sync",
                                "\n",
                                "reboot",
                                "\n"
                            ]
                        ]
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "NodeName"
                                    },
                                    {
                                        "Ref": "NodeIndex"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "BootPriority",
                        "Value": {
                            "Ref": "BootPriority"
                        }
                    },
                    {
                        "Key": "Purpose",
                        "Value": {
                            "Ref": "Purpose"
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    },
                    {
                        "Key": "project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ]
            }
        },
        "NatRouteEntry": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRTB"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATDevice"
                }
            }
        },
        "OptVolume": {
            "Type": "AWS::EC2::Volume",
            "Condition": "NeedsOptVolume",
            "DependsOn": "NATDevice",
            "Properties": {
                "Size": {
                    "Ref": "OptDiskSize"
                },
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "NATDevice",
                        "AvailabilityZone"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "NodeName"
                                    },
                                    {
                                        "Ref": "NodeIndex"
                                    },
                                    ":/opt"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    },
                    {
                        "Key": "project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ]
            }
        },
        "OptMount": {
            "Type": "AWS::EC2::VolumeAttachment",
            "Condition": "NeedsOptVolume",
            "Properties": {
                "InstanceId": {
                    "Ref": "NATDevice"
                },
                "VolumeId": {
                    "Ref": "OptVolume"
                },
                "Device": "/dev/xvdf"
            }
        },
        "AppEIP": {
            "Type": "AWS::EC2::EIP",
            "Condition": "NeedsEIP",
            "Properties": {
                "InstanceId": {
                    "Ref": "NATDevice"
                },
                "Domain": "vpc"
            }
        },
        "AppEIPRecord": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "NeedsEIP",
            "Properties": {
                "Comment": "",
                "HostedZoneName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "Domain"
                            },
                            "."
                        ]
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "NodeName"
                                        },
                                        {
                                            "Ref": "NodeIndex"
                                        },
                                        "-eip"
                                    ]
                                ]
                            },
                            ".",
                            {
                                "Ref": "Domain"
                            },
                            "."
                        ]
                    ]
                },
                "Type": "A",
                "TTL": "300",
                "ResourceRecords": [
                    {
                        "Ref": "AppEIP"
                    }
                ]
            }
        },
        "AppPrivateAddrRecord": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "Comment": "",
                "HostedZoneName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "Domain"
                            },
                            "."
                        ]
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "NodeName"
                                        },
                                        {
                                            "Ref": "NodeIndex"
                                        }
                                    ]
                                ]
                            },
                            ".",
                            {
                                "Ref": "Domain"
                            },
                            "."
                        ]
                    ]
                },
                "Type": "A",
                "TTL": "300",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "NATDevice",
                            "PrivateIp"
                        ]
                    }
                ]
            }
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "MustWait",
            "DependsOn": "NATDevice",
            "Properties": {
                "Handle": {
                    "Ref": "WaitHandle"
                },
                "Timeout": {
                    "Ref": "MaxProvisionTime"
                }
            }
        },
        "AppCPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alert if CPU > 80% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "80",
                "AlarmActions": [
                    {
                        "Ref": "OpsAlertsTopic"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "NATDevice"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "NatDeviceHighNetInALARM": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alert if Net In > 80% for 5 minutes",
                "MetricName": "NetworkIn",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "1",
                "Threshold": {
                    "Fn::FindInMap": [
                        "BandwidthAlarmsPerInstanceType",
                        {
                            "Ref": "NatInstanceType"
                        },
                        "high"
                    ]
                },
                "AlarmActions": [
                    {
                        "Ref": "OpsAlertsTopic"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "NATDevice"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "NatDeviceHighNetOutALARM": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alert if Net Out > 80% for 5 minutes",
                "MetricName": "NetworkOut",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "1",
                "Threshold": {
                    "Fn::FindInMap": [
                        "BandwidthAlarmsPerInstanceType",
                        {
                            "Ref": "NatInstanceType"
                        },
                        "high"
                    ]
                },
                "AlarmActions": [
                    {
                        "Ref": "OpsAlertsTopic"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "NATDevice"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        }
    },
    "Outputs": {
        "NATDeviceWaitResult": {
            "Condition": "MustWait",
            "Value": {
                "Fn::GetAtt": [
                    "WaitCondition",
                    "Data"
                ]
            },
            "Description": "Reported Wait Data"
        }
    }
}
